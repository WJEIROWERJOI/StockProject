@inject IModalService modalService
@using StockProject.Data.Services
@inherits LayoutComponentBase
@layout StockProject.Components.Layout.MainLayout

@inject ICurrentUserService currentUserService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager nav
@inject PointService pointService

<div>
    <div class="row">
        <div class="col-md-9">
            @Body
        </div>

        <div class="col-md-3 border mt-3 p-3">
            <h5 class="text-primary">Current</h5>

            @if (point == null)
            {
                <p>Loading...</p>
            }
            else
            {
                <ul class="list-group">
                    <li class="list-group-item">
                        <strong>UserName:</strong> @point?.UserName
                    </li>
                    <li class="list-group-item">
                        <strong>Money:</strong> @point?.Money
                    </li>
                    <li class="list-group-item">
                        <strong>CreatedAt:</strong> @point?.CreatedAt.AddHours(9).ToString("yy-MM-dd HH:mm")
                    </li>
                    <li class="list-group-item">
                        <strong>LastUpdatedAt:</strong> @point?.UpdatedAt.AddHours(9).ToString("yyMMdd HH:mm:ss")
                    </li>
                </ul>

            }

        </div>

    </div>
</div>

@code {
    Point? point;
    protected override void OnInitialized()
    {
        pointService.OnPointUpdated += HandlePointUpdated;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            point = await sessionStorage.GetItemAsync<Point>("Current");
        }
    }
    private async void HandlePointUpdated()
    {
        point = await sessionStorage.GetItemAsync<Point>("Current");

        if (point.Money <= 0)
        {
            var modal = modalService.Show<GambleResetModal>("you gone, reset?");
            var result = await modal.Result;
            if (!result.Cancelled)
            {
                point = await pointService.ResetPoint() ?? new Point();               
            }
            else
            {
                nav.NavigateTo("/");
            }
            await sessionStorage.SetItemAsync("Current",point);
            nav.Refresh(forceReload:true);
        }
        StateHasChanged();
    }
}
