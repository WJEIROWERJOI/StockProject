@page "/Gamble/Dice"

@using StockProject.Data.Services
@using System.ComponentModel.DataAnnotations
@inject ICurrentUserService currentUserService
@inject PointService pointService


<div class="form-group">
    <label class="form-label">Select Dice Betting Mode</label>
    <InputRadioGroup @bind-Value="GameMode" class="form-control">
        <div class="form-check">
            <InputRadio Value=1 class="form-check-input" />
            <label class="form-check-label">Odd or Even</label>
        </div>
        <div class="form-check">
            <InputRadio Value=2 class="form-check-input" />
            <label class="form-check-label">Exact Number</label>
        </div>
        <div class="form-check">
            <InputRadio Value=3 class="form-check-input" />
            <label class="form-check-label">High or Low</label>
        </div>
        <div class="form-check">
            <InputRadio Value=4 class="form-check-input" />
            <label class="form-check-label">Sum Bet</label>
        </div>
        <div class="form-check">
            <InputRadio Value=5 class="form-check-input" />
            <label class="form-check-label">Range Bet</label>
        </div>
    </InputRadioGroup>
</div>
<hr />


@* <p>@diceValue</p>
@foreach (var src in diceSrc)
{
    <p>@src</p>
} *@

@switch (GameMode)
{
    case 1:
        <p>Odd or Even Mode Selected</p>
        <label class="form-label">Number of Dice</label>
        <InputNumber @bind-Value=@diceCount class="form-control" @oninput="StateHasChanged" min="1" />

        diceCount = 1;
        foreach (var src in diceSrc)
        {
            <img src="@src" class="dice-image" />
        }

        <EditForm Model="Input" OnValidSubmit="() => RollDice(diceCount)">
            <label class="form-label">Odd or Even</label>
            <select @bind="Input.TargetNumber" class="form-select">
                <option value="1">Odd</option>
                <option value="2">Even</option>
            </select>
            <label class="form-label">Bet Amount</label>
            <InputNumber @bind-Value="Input.BetAmount" class="form-control" />
            <button class="btn btn-primary" type="submit">Roll Dice</button>
        </EditForm>
        break;

    case 2:
        <p>Exact Number Mode Selected</p>


        <label class="form-label">Number of Dice</label>
        <InputNumber @bind-Value=@diceCount class="form-control" @oninput="StateHasChanged" min="1" />

        diceCount = 1;
        foreach (var src in diceSrc)
        {
            <img src="@src" class="dice-image" />
        }

        <EditForm Model="Input" OnValidSubmit="() => RollDice(diceCount)">

            <label class="form-label">Target Number</label>
            <select @bind="Input.TargetNumber" class="form-select">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
            </select>
            @* <InputNumber @bind-Value="Input.TargetNumber" class="form-control" /> *@
            <label class="form-label">Bet Amount</label>
            <InputNumber @bind-Value="Input.BetAmount" class="form-control" />
            <button class="btn btn-primary" type="submit">Roll Dice</button>
        </EditForm>

        break;
    case 3:
        <p>High or Low Mode Selected</p>
        <label class="form-label">Number of Dice</label>
        <InputNumber @bind-Value=@diceCount class="form-control" @oninput="StateHasChanged" min="1" />

        diceCount = 1;

        foreach (var src in diceSrc)
        {
            <img src="@src" class="dice-image" />
        }

        <EditForm Model="Input" OnValidSubmit="() => RollDice(diceCount)">

            <label class="form-label">High or Low</label>
            <select @bind="Input.TargetNumber" class="form-select">
                <option value="1">High</option>
                <option value="2">Low</option>
            </select>

            <label class="form-label">Select TargetNumber</label>
            <select @bind="Input.Temp" class="form-select">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
            </select>

            <label class="form-label">Bet Amount</label>
            <InputNumber @bind-Value="Input.BetAmount" class="form-control" />
            <button class="btn btn-primary" type="submit">Roll Dice</button>
        </EditForm>
        break;
    case 4:
        <p>Sum Bet Mode Selected</p>
        <label class="form-label">Number of Dice</label>
        <InputNumber @bind-Value=@diceCount class="form-control" @oninput="StateHasChanged" min="1" />
        @foreach (var src in diceSrc.Take(6))
        {
            <img src="@src" class="dice-image" />
        }

        <EditForm Model="Input" OnValidSubmit="() => RollDice(diceCount)">
            <label class="form-label">Target Sum</label>
            <InputNumber @bind-Value="Input.TargetNumber" class="form-control" />

            <label class="form-label">Bet Amount</label>
            <InputNumber @bind-Value="Input.BetAmount" class="form-control" />

            <button class="btn btn-primary" type="submit">Roll Dice</button>
        </EditForm>

        break;
    case 5:
        <p>Range Bet Mode Selected</p>
        <label class="form-label">Number of Dice</label>
        <InputNumber @bind-Value=@diceCount class="form-control" @oninput="StateHasChanged" min="1" />
        @foreach (var src in diceSrc.Take(6))
        {
            <img src="@src" class="dice-image" />
        }
        <EditForm Model="Input" OnValidSubmit="() => RollDice(diceCount)">
            <label class="form-label">Select Range</label>
            <select @bind="Input.Temp" class="form-select">
                <option value="1">High</option>
                <option value="2">Low</option>
            </select>
            <label class="form-label">Target Sum</label>
            <InputNumber @bind-Value="Input.TargetNumber" class="form-control" />

            <label class="form-label">Bet Amount</label>
            <InputNumber @bind-Value="Input.BetAmount" class="form-control" />

            <button class="btn btn-primary" type="submit">Roll Dice</button>

        </EditForm>
        break;
        }
<p class="mt-3">@resultMessage</p>


@code {

    private int GameMode { get; set; } = 1;
    protected override async Task OnInitializedAsync()
    {
        await pointService.SetCurrentUser();
    }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    private sealed class InputModel
    {
       [Range(1, int.MaxValue, ErrorMessage = "Only positive numbers are allowed!")] public int Temp { get; set; } = 1;
       [Range(1, int.MaxValue, ErrorMessage = "Only positive numbers are allowed!")] public int TargetNumber { get; set; } = 1;
       [Range(0, int.MaxValue, ErrorMessage = "Only positive numbers are allowed!")] public int BetAmount { get; set; } = 0;
    }
    @* [Range(1, int.MaxValue, ErrorMessage = "Only positive numbers are allowed!")] *@
    private int diceCount = 1;
    private int diceValue = 1;
    private List<string> diceSrc = new List<string> { "Dice/dice_1.png" };
    private string resultMessage = string.Empty;

    protected async Task RollDice(int count)
    {
        @* diceSrc.RemoveAll(src => src.StartsWith("Dice/dice_")); *@
        diceSrc.Clear();

        diceSrc.Add("Dice/dice_roll.png");


        StateHasChanged();
        await Task.Delay(500);
        diceSrc.Clear();
        int diceTotal = 0;
        Random random = new Random();
        for (int i = 0; i < count; i++)
        {

            diceValue = random.Next(1, 7);
            diceSrc.Add($"Dice/dice_{diceValue}.png");
            diceTotal += diceValue;

        }

        switch (GameMode)
        {
            case 1:
                if (diceValue % 2 == Input.TargetNumber % 2)
                {
                    resultMessage = $"You rolled a {diceValue}. You win!";
                    @* await pointService.AddPointsAsync(Input.BetAmount); *@
                }
                else
                {
                    resultMessage = $"You rolled a {diceValue}. You lose!";
                    @* await pointService.SubtractPointsAsync(Input.BetAmount); *@
                }
                break;
            case 2:
                if (diceValue == Input.TargetNumber)
                {
                    resultMessage = $"You rolled a {diceValue}. You win!";
                    @* await pointService.AddPointsAsync(Input.BetAmount); *@
                }
                else
                {
                    resultMessage = $"You rolled a {diceValue}. You lose!";
                    @* await pointService.SubtractPointsAsync(Input.BetAmount); *@
                }
                break;
            case 3:
                //Input.TargetNumber = 1 for High, 2 for Low
                //Temp is the number to compare against
                if ((Input.TargetNumber == 1 && diceValue > Input.Temp) || (Input.TargetNumber == 2 && diceValue < Input.Temp))
                {
                    resultMessage = $"You rolled a {diceValue}. You win!";
                    @* await pointService.AddPointsAsync(Input.BetAmount); *@
                }
                else
                {
                    resultMessage = $"You rolled a {diceValue}. You lose!";
                    @* await pointService.SubtractPointsAsync(Input.BetAmount); *@
                }
                break;
            case 4:
                if (diceTotal == Input.TargetNumber)
                {
                    resultMessage = $"You rolled a total of {diceTotal}. You win!";
                    @* await pointService.AddPointsAsync(Input.BetAmount); *@
                }
                else
                {
                    resultMessage = $"You rolled a total of {diceTotal}. You lose!";
                    @* await pointService.SubtractPointsAsync(Input.BetAmount); *@
                }
                break;
            case 5:
                if((Input.Temp == 1 && diceTotal > Input.TargetNumber) || (Input.Temp == 2 && diceTotal < Input.TargetNumber))
                {
                    resultMessage = $"You rolled a total of {diceTotal}. You win!";
                    @* await pointService.AddPointsAsync(Input.BetAmount); *@
                }
                else
                {
                    resultMessage = $"You rolled a total of {diceTotal}. You lose!";
                    @* await pointService.SubtractPointsAsync(Input.BetAmount); *@
                }
                break;
        }
        StateHasChanged();
    }

}