@inject IToastService toastService;

@foreach (var src in diceSrc.Take(6))
{
    <img src="@src" class="dice-image" />
}

<EditForm Model="Input" OnValidSubmit="() => RollDice(diceCount)">
    @if (GameMode is 1)
    {
        <label class="form-label mt-3">Odd or Even</label>
        <select @bind="Input.Odd" class="form-select">
            <option value="1">Odd</option>
            <option value="2">Even</option>
        </select>
    }
    else if (GameMode is 3 or 5)
    {
        <label class="form-label mt-3">High or Low</label>
        <select @bind="Input.Odd" class="form-select">
            <option value="1">High</option>
            <option value="2">Low</option>
        </select>
    }

    @if (GameMode is not 1)
    {
        <label class="form-label mt-3">Target</label>
        <select @bind="Input.TargetNumber" class="form-select">
            @for (int i = diceCount; i <= diceCount * 6; i++)
            {
                <option value=@i>@i</option>
            }
        </select>
    }

    <label class="form-label mt-3">Bet Amount</label>
    <InputNumber @bind-Value="Input.BetAmount" class="form-control" />
    <button class="btn btn-primary" type="submit">Roll Dice</button>
</EditForm>

@* <p class="mt-3">@resultMessage</p> *@


@code {
    [Parameter]
    public int GameMode { get; set; }
    [Parameter]
    public List<string> diceSrc { get; set; } = new();
    [Parameter]
    public int diceCount { get; set; }
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private sealed class InputModel
    {
        // [Range(1, int.MaxValue, ErrorMessage = "Only positive numbers are allowed!")]
        [Range(1, 2)] public int Odd { get; set; } = 1;
        [Range(1, int.MaxValue)] public int TargetNumber { get; set; } = 1;
        [Range(1, int.MaxValue)] public int BetAmount { get; set; } = 0;
    }
    // private int diceCount = 1;

    private int diceValue = 1;
    
    // private string resultMessage = string.Empty;
    private bool WinOrLose;
    
    protected async Task RollDice(int count)
    {
        WinOrLose = false;
        toastService.ClearAll();

        diceSrc.Clear();
        diceSrc.Add("Dice/dice_roll.png");
        StateHasChanged();

        await Task.Delay(500);
        
        int diceTotal = 0;
        Random random = new Random();
        
        diceSrc.Clear();
        for (int i = 0; i < count; i++)
        {
            diceValue = random.Next(1, 7);
            diceSrc.Add($"Dice/dice_{diceValue}.png");
            diceTotal += diceValue;
        }

        switch (GameMode)
        {
            case 1:
                if (diceTotal % 2 == Input.Odd % 2)
                {
                    WinOrLose = true;
                    @* await pointService.AddPointsAsync(Input.BetAmount); *@
                }
                else
                {
                    @* await pointService.SubtractPointsAsync(Input.BetAmount); *@
                }

                break;
            case 2:
                if (diceTotal == Input.TargetNumber)
                {
                    WinOrLose = true;
                    @* await pointService.AddPointsAsync(Input.BetAmount); *@
                }
                else
                {
                    @* await pointService.SubtractPointsAsync(Input.BetAmount); *@
                }
                break;
            case 3:
                if ((Input.Odd == 1 && diceTotal > Input.TargetNumber) || (Input.Odd == 2 && diceTotal < Input.TargetNumber))
                {
                    WinOrLose = true;
                    @* await pointService.AddPointsAsync(Input.BetAmount); *@
                }
                else
                {
                    @* await pointService.SubtractPointsAsync(Input.BetAmount); *@
                }
                break;
            case 4:
                if (diceTotal == Input.TargetNumber)
                {
                    WinOrLose = true;
                    @* await pointService.AddPointsAsync(Input.BetAmount); *@
                }
                else
                {
                    @* await pointService.SubtractPointsAsync(Input.BetAmount); *@
                }
                break;
            case 5:
                if ((Input.Odd == 1 && diceTotal > Input.TargetNumber) || (Input.Odd == 2 && diceTotal < Input.TargetNumber))
                {
                    WinOrLose = true;
                    @* await pointService.AddPointsAsync(Input.BetAmount); *@
                }
                else
                {
                    
                    @* await pointService.SubtractPointsAsync(Input.BetAmount); *@
                }
                break;
        }



        if (WinOrLose)
        {
            toastService.ShowSuccess($"You rolled {diceTotal}. You win!");
        }
        else
        {
            toastService.ShowError($"You rolled {diceTotal}. You lose!");
        }

        StateHasChanged();
    }
}
