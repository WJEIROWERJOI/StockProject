@using StockProject.Data.Services
@inject ICurrentUserService currentUserService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IToastService toastService
@inject PointService pointService


<div class="container mt-4">
    <div class="text-center mb-3">
        @foreach (var src in diceSrc.Take(6))
        {
            <img src="@src" class="dice-image mx-1" style="width: 60px; height: 60px;" />
        }
    </div>
    @if (GameMode is 4 or 5)
    {
        <div class="text-center mb-3">
            <span class="fw-bold me-2">Total: @diceTotal</span>
            @foreach (string i in diceSrc)
            {
                <span class="badge bg-secondary me-1">
                    @i.Replace("Dice/dice_", "").Replace(".png", "")
                </span>
            }
        </div>
    }

    <EditForm Model="Input" OnValidSubmit="() => RollDice(diceCount)">
        <div class="card p-4 shadow-sm">
            <div class="row g-3">

                @if (GameMode is 1)
                {
                    <div class="col-md-6">
                        <label class="form-label">Odd or Even</label>
                        <select @bind="Input.Odd" class="form-select">
                            <option value="1">Odd</option>
                            <option value="2">Even</option>
                        </select>
                    </div>
                }
                else if (GameMode is 3 or 5)
                {
                    <div class="col-md-6">
                        <label class="form-label">High or Low</label>
                        <select @bind="Input.Odd" class="form-select">
                            <option value="1">High</option>
                            <option value="2">Low</option>
                        </select>
                    </div>
                }

                @if (GameMode is not 1)
                {
                    <div class="col-md-6">
                        <label class="form-label">Target</label>
                        <select @bind="Input.TargetNumber" class="form-select">
                            @for (int i = diceCount; i <= diceCount * 6; i++)
                            {
                                <option value="@i">@i</option>
                            }
                        </select>
                    </div>
                }

                <div class="col-md-6">
                    <label class="form-label">Bet Amount</label>
                    <InputNumber @bind-Value="Input.BetAmount" class="form-control" />
                </div>

                <div class="col-12 text-end mt-3">
                    <button class="btn btn-primary px-4" type="submit">🎲 Roll Dice</button>
                </div>
            </div>
        </div>
    </EditForm>

</div>

@* <p class="mt-3">@resultMessage</p> *@


@code {
    [Parameter]
    public int GameMode { get; set; }
    [Parameter]
    public List<string> diceSrc { get; set; } = new();
    [Parameter]
    public int diceCount { get; set; }
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    private sealed class InputModel
    {
        // [Range(1, int.MaxValue, ErrorMessage = "Only positive numbers are allowed!")]
        [Range(1, 2)] public int Odd { get; set; } = 1;
        [Range(1, int.MaxValue)] public int TargetNumber { get; set; } = 1;
        [Range(1, int.MaxValue)] public int BetAmount { get; set; } = 0;
    }
    // private int diceCount = 1;
    private int diceValue = 1;
    private int diceTotal = 0;
    // private string resultMessage = string.Empty;
    private bool WinOrLose;
    private Point? currentPoint;
    protected override async Task OnInitializedAsync()
    {
        currentPoint = await pointService.SetCurrentUser();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (currentPoint == null)
            {
                currentPoint = await sessionStorage.GetItemAsync<Point>("Current");
                if (currentPoint.UserId != currentUserService.UserId)
                {
                    currentPoint = new();
                }
            }
            await sessionStorage.SetItemAsync("Current", currentPoint);
        }

    }

    protected async Task RollDice(int count)
    {
        WinOrLose = false;
        toastService.ClearAll();

        diceSrc.Clear();
        diceSrc.Add("Dice/dice_roll.png");
        StateHasChanged();

        await Task.Delay(500);

        diceTotal = 0;
        Random random = new Random();

        diceSrc.Clear();
        for (int i = 0; i < count; i++)
        {
            diceValue = random.Next(1, 7); diceSrc.Add($"Dice/dice_{diceValue}.png"); diceTotal
            += diceValue;
        }
        switch (GameMode)
        {
            case 1: if (diceTotal % 2 == Input.Odd % 2) { WinOrLose = true; } break;
            case 2:
                if
                (diceTotal == Input.TargetNumber) { WinOrLose = true; }
                break;
            case 3:
                if ((Input.Odd == 1 && diceTotal >
                Input.TargetNumber) || (Input.Odd == 2 && diceTotal < Input.TargetNumber)) { WinOrLose = true; }
                break;
            case 4:
                if
                (diceTotal == Input.TargetNumber) { WinOrLose = true; }
                break;
            case 5:
                if ((Input.Odd == 1 && diceTotal >
                Input.TargetNumber) || (Input.Odd == 2 && diceTotal < Input.TargetNumber)) { WinOrLose = true; }
                break;
        }
        if (WinOrLose)
        {
            await pointService.AddPointsAsync(Input.BetAmount, currentPoint!);
            toastService.ShowSuccess($"You rolled {diceTotal}. You win!");
        }
        else
        {
            await pointService.SubtractPointsAsync(Input.BetAmount, currentPoint!);
            toastService.ShowError($"You rolled{diceTotal}. You lose!");
        }
        await sessionStorage.SetItemAsync("Current", currentPoint);
        pointService.CallPoint(); StateHasChanged();
    }

}
