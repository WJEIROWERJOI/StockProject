@using System.ComponentModel.DataAnnotations

@switch (GameMode)
{
    case 1:
        <p>Odd or Even Mode Selected</p>
        <label class="form-label">Number of Dice</label>
        <InputNumber @bind-Value=@diceCount class="form-control" min="1" disabled />
        diceCount = 1;
        <DiceRoll diceSrc=@diceSrc />

        <EditForm Model="Input" OnValidSubmit="() => RollDice(diceCount)">

            
            //O
            <label class="form-label">Odd or Even</label>
            <select @bind="Input.Odd" class="form-select">
                <option value="1">Odd</option>
                <option value="2">Even</option>
            </select>


            //X
            <label class="form-label">Target</label>
            <select @bind="Input.TargetNumber" class="form-select">
                @for (int i = diceCount; i <= diceCount * 6; i++)
                {
                    <option value=@i>@i</option>
                }
            </select>
            
            //O
            <label class="form-label">Bet Amount</label>
            <InputNumber @bind-Value="Input.BetAmount" class="form-control" />

            <button class="btn btn-primary" type="submit">Roll Dice</button>

        </EditForm>

        break;

    case 2:
        <p>Exact Number Mode Selected</p>

        <label class="form-label">Number of Dice</label>
        <InputNumber @bind-Value=@diceCount class="form-control" min="1" disabled />
        diceCount = 1;
        <DiceRoll diceSrc=@diceSrc />



        <EditForm Model="Input" OnValidSubmit="() => RollDice(diceCount)">
        
            //X
            <label class="form-label">Select Range</label>
            <select @bind="Input.Odd" class="form-select">
                <option value="1">High</option>
                <option value="2">Low</option>
            </select>


            //O
            <label class="form-label">Target</label>
            <select @bind="Input.TargetNumber" class="form-select">
                @for (int i = diceCount; i <= diceCount * 6; i++)
                {
                    <option value=@i>@i</option>
                }
            </select>


            //O
            <label class="form-label">Bet Amount</label>
            <InputNumber @bind-Value="Input.BetAmount" class="form-control" />

            <button class="btn btn-primary" type="submit">Roll Dice</button>
        </EditForm>

        break;

    case 3:
        <p>High or Low Mode Selected</p>


        <label class="form-label">Number of Dice</label>
        <InputNumber @bind-Value=@diceCount class="form-control" min="1" disabled />
        diceCount = 1;
        <DiceRoll diceSrc=@diceSrc />


        <EditForm Model="Input" OnValidSubmit="() => RollDice(diceCount)">

            //O
            <label class="form-label">High or Low</label>

            <select @bind="Input.Odd" class="form-select">
                <option value="1">High</option>
                <option value="2">Low</option>
            </select>

            //O
            <label class="form-label">Target</label>
            <select @bind="Input.TargetNumber" class="form-select">
                @for (int i = diceCount; i <= diceCount * 6; i++)
                {
                    <option value=@i>@i</option>
                }
            </select>


            //O
            <label class="form-label">Bet Amount</label>
            <InputNumber @bind-Value="Input.BetAmount" class="form-control" />
            <button class="btn btn-primary" type="submit">Roll Dice</button>
        </EditForm>

        break;


    case 4:
        <p>Sum Bet Mode Selected</p>
        <label class="form-label">Number of Dice</label>
        <InputNumber @bind-Value=@diceCount class="form-control" @oninput="StateHasChanged" min="1" />

        <DiceRoll diceSrc=@diceSrc />


        <EditForm Model="Input" OnValidSubmit="() => RollDice(diceCount)">
            
            //X
            <label class="form-label">Select Range</label>
            <select @bind="Input.Odd" class="form-select">
                <option value="1">High</option>
                <option value="2">Low</option>
            </select>


            //O
            <label class="form-label">Target</label>
            <select @bind="Input.TargetNumber" class="form-select">
                @for (int i = diceCount; i <= diceCount * 6; i++)
                {
                    <option value=@i>@i</option>
                }
            </select>


            //O
            <label class="form-label">Bet Amount</label>
            <InputNumber @bind-Value="Input.BetAmount" class="form-control" />

            <button class="btn btn-primary" type="submit">Roll Dice</button>
        </EditForm>

        break;
    case 5:
        <p>Range Bet Mode Selected</p>
        <label class="form-label">Number of Dice</label>
        <InputNumber @bind-Value=@diceCount class="form-control" @oninput="StateHasChanged" min="1" />

        <DiceRoll diceSrc=@diceSrc />

        <EditForm Model="Input" OnValidSubmit="() => RollDice(diceCount)">
            
            
            //O
            <label class="form-label">Select Range</label>
            <select @bind="Input.Odd" class="form-select">
                <option value="1">High</option>
                <option value="2">Low</option>
            </select>

            //O
            <label class="form-label">Target</label>
            <select @bind="Input.TargetNumber" class="form-select">
                @for (int i = diceCount; i <= diceCount * 6; i++)
                {
                    <option value=@i>@i</option>
                }
            </select>


            //O
            <label class="form-label">Bet Amount</label>
            <InputNumber @bind-Value="Input.BetAmount" class="form-control" />

            <button class="btn btn-primary" type="submit">Roll Dice</button>

        </EditForm>
        break;
}

<p class="mt-3">@resultMessage</p>

@code {
    [Parameter]
    public int GameMode { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private sealed class InputModel
    {
        // [Range(1, int.MaxValue, ErrorMessage = "Only positive numbers are allowed!")]
        [Range(1, 2)] public int Odd { get; set; } = 1;
        [Range(1, int.MaxValue)] public int TargetNumber { get; set; } = 1;
        [Range(1, int.MaxValue)] public int BetAmount { get; set; } = 0;
    }

    private int diceCount = 1;
    private int diceValue = 1;

    private List<string> diceSrc = new List<string> { "Dice/dice_1.png" };

    private string resultMessage = string.Empty;

    protected async Task RollDice(int count)
    {
        diceSrc.Clear();
        diceSrc.Add("Dice/dice_roll.png");
        StateHasChanged();
        await Task.Delay(500);
        diceSrc.Clear();
        int diceTotal = 0;
        Random random = new Random();
        for (int i = 0; i < count; i++)
        {
            diceValue = random.Next(1, 7);
            diceSrc.Add($"Dice/dice_{diceValue}.png");
            diceTotal += diceValue;
        }

        switch (GameMode)
        {
            case 1:
                if (diceTotal % 2 == Input.Odd % 2)
                {
                    resultMessage = $"You rolled a {diceTotal}. You win!";
                    @* await pointService.AddPointsAsync(Input.BetAmount); *@
                }
                else
                {
                    resultMessage = $"You rolled a {diceTotal}. You lose!";
                    @* await pointService.SubtractPointsAsync(Input.BetAmount); *@
                }
                break;
            case 2:
                if (diceTotal == Input.TargetNumber)
                {
                    resultMessage = $"You rolled a {diceTotal}. You win!";
                    @* await pointService.AddPointsAsync(Input.BetAmount); *@
                }
                else
                {
                    resultMessage = $"You rolled a {diceTotal}. You lose!";
                    @* await pointService.SubtractPointsAsync(Input.BetAmount); *@
                }
                break;
            case 3:
                //Input.TargetNumber = 1 for High, 2 for Low
                //Temp is the number to compare against
                if ((Input.Odd == 1 && diceTotal > Input.TargetNumber) || (Input.Odd == 2 && diceTotal < Input.TargetNumber))
                {
                    resultMessage = $"You rolled a {diceTotal}. You win!";
                    @* await pointService.AddPointsAsync(Input.BetAmount); *@
                }
                else
                {
                    resultMessage = $"You rolled a {diceTotal}. You lose!";
                    @* await pointService.SubtractPointsAsync(Input.BetAmount); *@
                }
                break;
            case 4:
                if (diceTotal == Input.TargetNumber)
                {
                    resultMessage = $"You rolled a total of {diceTotal}. You win!";
                    @* await pointService.AddPointsAsync(Input.BetAmount); *@
                }
                else
                {
                    resultMessage = $"You rolled a total of {diceTotal}. You lose!";
                    @* await pointService.SubtractPointsAsync(Input.BetAmount); *@
                }
                break;
            case 5:
                if ((Input.Odd == 1 && diceTotal > Input.TargetNumber) || (Input.Odd == 2 && diceTotal < Input.TargetNumber))
                {
                    resultMessage = $"You rolled a total of {diceTotal}. You win!";
                    @* await pointService.AddPointsAsync(Input.BetAmount); *@
                }
                else
                {
                    resultMessage = $"You rolled a total of {diceTotal}. You lose!";
                    @* await pointService.SubtractPointsAsync(Input.BetAmount); *@
                }
                break;
        }
        StateHasChanged();
    }
}