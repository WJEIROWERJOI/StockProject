@page "/User/Login"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using StockProject.Components.Pages.Account.Shared
@using StockProject.Data.Services

@inject ICurrentUserService currentUserService
@inject UserManager<UserEntity> userManager
@inject SignInManager<UserEntity> signInManager
@inject NavigationManager nav

<PageTitle>UserLogin</PageTitle>
<h3>Login</h3>
<hr />

@if (!string.IsNullOrEmpty(errorMessage))
{
    var statusMessageClass = errorMessage.StartsWith("Error") ? "danger" : "success";
    <div class="alert alert-@statusMessageClass" role="alert">
        @errorMessage
    </div>
}

@* <StatusMessage Message="@errorMessage" /> *@
<EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
    @* <DataAnnotationsValidator /> *@
    @* <ValidationSummary /> *@
    @* <ValidationSummary class="text-danger" role="alert" /> *@
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.Name" class="form-control" autocomplete="username" aria-required="true"
            placeholder="UserName" />
        <label class="form-label">UserName</label>
        @* <ValidationMessage For="() => Input.Name" class="text-danger" /> *@
    </div>
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password"
            aria-required="true" placeholder="password" />
        <label for="password" class="form-label">Password</label>
        @* <ValidationMessage For="() => Input.Password" class="text-danger" /> *@
    </div>
    <div class="checkbox mb-3">
        <label class="form-label">
            <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
            Remember me
        </label>
    </div>
    <div>
        <button type="submit" class="w-100 btn btn-primary">Log in</button>
    </div>
</EditForm>
<div class="d-flex justify-content-end mt-3">
    @* <NavLink class="btn btn-secondary mt-3" href="/User/ForgotPassword">Forgot Password?</NavLink> *@
    <NavLink class="btn btn-info mt-3" href="/User/Register">Register</NavLink>
</div>

@code {
    @* [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!; *@
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    private string? errorMessage = string.Empty;
    private sealed class InputModel
    {
        [Required]
        public string Name { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
    protected override void OnInitialized()
    {
        if (currentUserService.IsSignedIn())
        {
            nav.NavigateTo("/", forceLoad: true);
        }
    }

    private async Task LoginUser()
    {
        @* if (string.IsNullOrEmpty(Input.Name) || string.IsNullOrEmpty(Input.Password))
        {
            errorMessage = "Error: UserName or Password cannot be empty.";
            return;
        }
        else
        { *@

        var user = await userManager.FindByNameAsync(Input.Name);
        if (user == null)
        {
            errorMessage = "Error: User cannot find";
            return;
        }
        else
        {
            var result = await signInManager.PasswordSignInAsync(Input.Name, Input.Password, Input.RememberMe, false);
            if (result.Succeeded)
            {
                nav.NavigateTo(nav.BaseUri);
            }
            else
            {
                errorMessage = "Error: Invalid login attempt.";
            }
        }


    }
}