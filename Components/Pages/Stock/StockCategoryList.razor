@page "/stock/category"
@using Microsoft.AspNetCore.Authorization
@using StockProject.Data.Services
@inject StockCategoryService stockCategoryService
@inject IToastService toastService
@attribute [Authorize(Roles="Admin")]

<PageTitle>CategoryList</PageTitle>
<h3>CategoryList</h3>
<hr />

<div class="d-flex justify-content-end">

    <button @onclick="BeginCreate" class="btn btn-primary">추가</button>
</div>

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;
    private async Task BeginCreate()
    {
        var modal = Modal.Show<StockCategoryCreate>("Category Creation");
        var result = await modal.Result;
        if (!result.Cancelled)
        {
            await InitialDataBring();
            StateHasChanged();
        }
    }
}

<table class="table">
    <thead>
        <tr>
            <th scope="col">Id</th>
            <th scope="col">Name</th>
            <th scope="col">Description</th>
            <th scope="col">Option</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var cate in categories)
        {
            <tr>
                <td>@cate.CategoryId</td>
                <td>
                    <EditForm Model="@cate" OnValidSubmit="() => ChangeCategory(cate)">
                        <InputText @bind-Value="cate.Name" class="form-control" />
                    </EditForm>
                </td>
                <td>
                    <EditForm Model="@cate" OnValidSubmit="() => ChangeCategory(cate)">
                        <InputText @bind-Value="cate.Description" class="form-control" />
                    </EditForm>
                </td>
                <td>
                    <EditForm Model="@cate" OnValidSubmit="() => ChangeCategory(cate)">
                        <button class="btn btn-success btn-sm" type="submit">저장</button>
                        <button class="btn btn-info btn-sm" type="button" @onclick="CancelEdit">취소</button>
                    </EditForm>
                    <button class="btn btn-danger btn-sm" type="button" @onclick="() => DeleteStock(cate)">삭제</button>
                </td>
            </tr>
            @* </EditForm> *@        
        }
    </tbody>
</table>

@code {
    [SupplyParameterFromForm]
    List<StockCategory> categories { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await InitialDataBring();
    }

    private async Task ChangeCategory(StockCategory category)
    {
        try
        {
            await stockCategoryService.UpdateStockCategoryAsync(category);
            toastService.ShowSuccess($"{category.Name} changed Successfully!");
        }
        catch (KeyNotFoundException ex)
        {
            toastService.ShowError($"데이터를 찾을 수 없습니다: {ex.Message}");
            return;
        }
        catch (Exception ex)
        {
            toastService.ShowError($"오류 발생: {ex.Message}");
            return;
        }
        await InitialDataBring();
        StateHasChanged();
    }

    private async Task TempChangeCategory(StockCategory category)
    {
        await stockCategoryService.UpdateStockCategoryAsync(category);
        toastService.ShowSuccess($"{category.Name} changed Successfully!");

        await InitialDataBring();
        @* StateHasChanged(); *@
    }


    private async Task DeleteStock(StockCategory category)
    {
        try
        {
            if (await stockCategoryService.CheckStockCategoryStocks(category))
            {
                var beforemodal = Modal.Show<DeleteCategoryConfirmModal>("Confirm Delete");
                var beforeresult = await beforemodal.Result;
                if (beforeresult.Cancelled)
                {
                    return;
                }
            }
            var modal = Modal.Show<DeleteConfirmModal>("Confirm Delete");
            var result = await modal.Result;

            if (!result.Cancelled)
            {
                await stockCategoryService.DeleteStockCategoryAsync(category);
                toastService.ShowSuccess($"{category.Name} deleted Successfully!");
            }
        }
        catch (KeyNotFoundException ex)
        {
            toastService.ShowError($"데이터를 찾을 수 없습니다: {ex.Message}");
            return;
        }
        catch (Exception ex)
        {
            toastService.ShowError($"오류 발생: {ex.Message}");
            return;
        }
        await InitialDataBring();
        StateHasChanged();
    }

    private async Task CancelEdit()
    {
        await InitialDataBring();
        StateHasChanged();
    }

    private async Task InitialDataBring()
    {
        categories = await stockCategoryService.FindAllStockCategories();
    }
}
