@page "/TimeTable/Student"


@inject IToastService toastService
@inject IModalService modalService
@inject StudentService studentService
@inject NavigationManager nav
<PageTitle>StudentList</PageTitle>
<h3>StudentList</h3>
<hr />

<button class="btn btn-primary" type="button" @onclick="StudentCreateModal">학생 등록</button>
<br />

<div style="display:flex;justify-content: flex-end;">
    <div class="input-group" style="max-width: fit-content;">


        <select @bind=@searchTopic class="form-select form-select-sm">
            <option value="Name">Name</option>
            <option value="StudentGrade">StudentGrade</option>
        </select>

        @if (searchTopic == "StudentGrade")
        {
            <select @bind="@searchContent" class="form-select form-select-sm">
                @foreach (var group in Enum.GetValues(typeof(StudentGrade)))
                {
                    <option value="@group">@group</option>
                }
            </select>
        }
        else
        {
            <InputText @bind-Value="@searchContent" class="form-control" />
        }

        <button type="button" @onclick="StartSearch" class="btn btn-secondary">검색</button>
        <button @onclick="CancelSearch" class="btn btn-secondary border-start-1">취소</button>

    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    public string? searchTopic { get; set; }
    [SupplyParameterFromQuery]
    public string? searchContent { get; set; }


    private void StartSearch()
    {
        nav.NavigateTo($"/TimeTable/Student?searchTopic={searchTopic}&searchContent={searchContent}", forceLoad: true);
    }

    private void CancelSearch()
    {
        searchContent = "";
        // searchTopic = "";
        nav.NavigateTo("/Student/List?");
    }
}




<table class="table">
    <thead>
        <tr>
            <th scope="col">학생이름</th>
            <th scope="col">설명</th>
            <th scope="col">학년</th>
            <th scope="col">반</th>
            <th scope="col">불가시간</th>
            <th scope="col">버튼</th>
        </tr>
    </thead>

    <tbody>
        @foreach (var student in students)
        {
            <tr>

                <td>@student.Name</td>
                <td>@student.Description</td>
                <td>@student.StudentGrade.ToString()</td>
                <td>@student.Class?.Name</td>

                <td>

                    @foreach (var t in student.unableDateTime)
                    {
                        @* <span>@t.Student.Description,@t.StudentId,@t.Student.Id</span> *@
                        <div>
                        @* <div class="d-flex justify-content-md-between"> *@
                            <span>@t.Description, @t.DayOfWeek.ToString().Substring(0,3), @($"{t.StartTime:hh\\:mm} - {t.EndTime:hh\\:mm}")</span>
                            <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteTime(t.Id)">X</button>
                            <br />
                        </div>
                    }

                </td>
                <td>
                    <button class="btn btn-primary btn-sm" @onclick="() => ManageStudentModal(student.Id)">시간 추가</button>
                    <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteStudent(student.Id)">X</button>
                </td>
            </tr>
        }

    </tbody>
</table>

@code {
    List<Student> students = new();
    protected override async Task OnInitializedAsync()
    {
        students = await studentService.GetAllStudentsAsync();
    }

    // protected override async Task OnParametersSetAsync()
    // {
    //     if (string.IsNullOrWhiteSpace(searchTopic) || string.IsNullOrWhiteSpace(searchContent))
    //     {
    //         students = new List<Student>(); 기본값 설정
    //         return;
    //     }
    //     else
    //     {
    //         students = await studentService.GetSearchContentAsync(searchTopic, searchContent);
    //     }
    // }



    async Task DeleteTime(int id)
    {
        if (await studentService.DeleteTimeAsync(id))
        {
            toastService.ShowSuccess("시간 삭제 성공!");
        }
        else
        {
            toastService.ShowError("시간 삭제 실패!");
        }
    }

    async Task StudentCreateModal()
    {
        var modal = modalService.Show<StudentCreateModal>("Create Student");
        var result = await modal.Result;
        if (!result.Cancelled)
        {
            if (result.Data is bool success)
            {
                // students = await studentService.GetAllStudentsAsync();
                // 다시 받아 오는거 필요
                toastService.ShowSuccess("학생 생성!");
            }

        }
    }
    async Task ManageStudentModal(int id)
    {
        var parameter = new ModalParameters();
        parameter.Add(nameof(StudentManageModal.StudentId), id);

        var modal = modalService.Show<StudentManageModal>("Manage Student", parameter);
        var result = await modal.Result;
        if (!result.Cancelled)
        {
            if (result.Data is bool success)
            {
                toastService.ShowSuccess("학생 관리!");
            }
        }
    }
    async Task DeleteStudent(int id)
    {
        if (await studentService.DeleteStudentAsync(id))
        {
            toastService.ShowSuccess("학생 삭제 성공!");
            StateHasChanged();
        }
        else
        {
            toastService.ShowError("학생 삭제 실패!");
        }
    }

}

