@page "/TimeTable/Student"


@inject IToastService toastService
@inject IModalService modalService
@inject StudentService studentService
@inject NavigationManager nav
<PageTitle>StudentList</PageTitle>
<h3>StudentList</h3>
<hr />

<button class="btn btn-primary" type="button" @onclick="StudentCreateModal">학생 등록</button>
<br />

<div style="display:flex;justify-content: flex-end;">
    <div class="input-group" style="max-width: fit-content;">


        <select @bind=@searchTopic class="form-select form-select-sm">
            <option value="Name">Name</option>
            <option value="StudentGrade">StudentGrade</option>
        </select>

        @if (searchTopic == "StudentGrade")
        {
            <select @bind="@searchContent" class="form-select form-select-sm">
                @foreach (var group in Enum.GetValues(typeof(StudentGrade)))
                {
                    <option value="@group">@group</option>
                }
            </select>
        }
        else
        {
            <InputText @bind-Value="@searchContent" class="form-control" />
        }

        <button type="button" @onclick="StartSearch" class="btn btn-secondary">검색</button>
        <button @onclick="CancelSearch" class="btn btn-secondary border-start-1">취소</button>

    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    public string? searchTopic { get; set; }
    [SupplyParameterFromQuery]
    public string? searchContent { get; set; }


    private void StartSearch()
    {
        nav.NavigateTo($"/TimeTable/Student?searchTopic={searchTopic}&searchContent={searchContent}", forceLoad: true);
    }

    private void CancelSearch()
    {
        searchContent = "";
        // searchTopic = "";
        nav.NavigateTo("/Student/List?");
    }
}
<div class="d-flex justify-content-between align-items-center mb-3">
    <h5 class="mb-0">🎓 Student List</h5>
    <button class="btn btn-primary btn-sm">
    @* <button class="btn btn-primary btn-sm" @onclick="AddStudent"> *@
        <i class="bi bi-plus-lg"></i> 추가
    </button>
</div>

<div class="table-responsive shadow-sm rounded bg-white border">
    <table class="table table-borderless align-middle mb-0">
        <thead class="table-light border-bottom">
            <tr>
                <th>이름</th>
                <th>학년</th>
                <th>반</th>
                <th>설명</th>
                <th class="text-end">세부사항</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr class="border-bottom">
                    <td class="fw-semibold">@student.Name</td>
                    <td><span class="badge bg-secondary">@student.StudentGrade</span></td>
                    <td><span class="badge bg-info text-dark">@student.Class?.Name</span></td>
                    <td class="text-muted">@student.Description</td>
                    <td class="text-end">
                        <button class="btn btn-sm btn-primary" @onclick="() => DetailStudentModal(student)">
                            상세
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<table class="table table-bordered text-center align-middle" style="background-color:#f5f5f5;">
    <thead style="background-color: #ccc; font-weight: bold;">
        <tr>
            <th>이름</th>
            <th>학년</th>
            <th>반</th>
            <th>설명</th>
            <th>세부사항</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var student in students)
        {
            <tr style="background-color:white;">
                <td>@student.Name</td>
                <td>@student.StudentGrade.ToString()</td>
                <td>@(student.Class?.Name ?? "미정")</td>
                <td>@student.Description</td>
                <td>
                    <button class="btn btn-primary btn-sm rounded-3 px-3" @onclick="() => DetailStudentModal(student)">
                        <span class="fw-bold text-white">&gt;</span>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>


<div class="table-responsive">
    <table class="table table-striped table-hover align-middle text-center">
        <thead class="table-light">

@* <table class="table table-bordered align-middle text-center">
    <thead class="table-primary"> *@
            <tr @onclick='() => toastService.ShowInfo("😎😎😎😎")'>
            <th scope="col">학생이름</th>
            <th scope="col">설명</th>
            <th scope="col">학년</th>
            <th scope="col">반</th>
            <th scope="col">버튼</th>
        </tr>
    </thead>

    <tbody>
        @foreach (var student in students)
        {
                <tr @onclick="() => DetailStudentModal(student)">

                <td>@student.Name</td>
                <td>@student.Description</td>
                <td>@student.StudentGrade.ToString()</td>
                <td>@student.Class?.Name</td>
                <td>
                    @* <button class="btn btn-primary btn-sm" @onclick="() => DetailStudentModal(student)">상세</button> *@
                    <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteStudent(student.Id)">삭제</button>
                </td>
            </tr>
        }

    </tbody>
</table>
</div>

@code {
    List<Student> students = new();
    protected override async Task OnInitializedAsync()
    {
        students = await studentService.GetAllStudentsAsync();
    }
    async Task StudentCreateModal()
    {
        var modal = modalService.Show<StudentCreateModal>("Create Student");
        var result = await modal.Result;
        if (!result.Cancelled)
        {
            if (result.Data is bool success)
            {
                // students = await studentService.GetAllStudentsAsync();
                // 다시 받아 오는거 필요
                toastService.ShowSuccess("학생 생성!");
            }

        }
    }
    async Task DetailStudentModal(Student student)
    {
        var parameter = new ModalParameters();
        parameter.Add(nameof(StudentDetailModal.student), student);

        var modal = modalService.Show<StudentDetailModal>("Detail Student", parameter);
        var result = await modal.Result;
        if (!result.Cancelled)
        {
            if (result.Data is bool success)
            {
                toastService.ShowSuccess("학생 관리!");
            }
        }

    }
    async Task DeleteStudent(int id)
    {
        if (await studentService.DeleteStudentAsync(id))
        {
            toastService.ShowSuccess("학생 삭제 성공!");
            StateHasChanged();
        }
        else
        {
            toastService.ShowError("학생 삭제 실패!");
        }
    }

}

