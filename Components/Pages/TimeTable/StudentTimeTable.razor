@page "/TimeTable/Time"

@inject StudentService studentService
@inject NavigationManager nav

<style>
    td {
        vertical-align: middle;
        text-align: center;
    }
</style>

<div style="display:flex;">
    <div class="input-group" style="max-width: fit-content;">

        <InputSelect TValue="string" @bind-Value=@searchTopic class="form-select">
            <option value="Name">Name</option>
            <option value="StudentClass">StudentClass</option>
        </InputSelect>
        @if (searchTopic is "StudentClass")
        {
            <InputSelect TValue="string" @bind-Value=@searchContent class="form-select">
                @foreach (var klass in classes)
                {
                    <option value=@klass.Id>@klass.Name</option>
                }
            </InputSelect>
        }
        else
        {
            <InputText @bind-Value="@searchContent" class="form-control" />
        }
        <button type="button" @onclick="StartSearch" class="btn btn-secondary">검색</button>
        <button @onclick="CancelSearch" class="btn btn-secondary border-start-1">취소</button>

    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    public string? searchTopic { get; set; }
    [SupplyParameterFromQuery]
    public string? searchContent { get; set; }


    private void StartSearch()
    {
        nav.NavigateTo($"/TimeTable/Time?searchTopic={searchTopic}&searchContent={searchContent}", forceLoad: true);
    }

    private void CancelSearch()
    {
        nav.NavigateTo("/TimeTable/Time?");
    }
    protected override async Task OnParametersSetAsync()
    {
        if (String.IsNullOrWhiteSpace(searchTopic))
        {
            times = await studentService.GetAllTimesAsync();
        }
        else if (searchTopic is "Name")
        {
            times = await studentService.GetTimesByStudentNameAsync(searchContent!);
        }
        else if (searchTopic is "StudentClass")
        {
            times = await studentService.GetTimesByStudentClassAsync(searchContent!);
        }

    }
}

@foreach (var toto in times)
{
    <span>@toto.Student.Name,</span>
}


<table class="table table-bordered text-center">
    <thead>
        <tr>
            <th>시간＼요일</th>
            @foreach (var day in Enum.GetValues<DayOfWeek>())
            {
                <th>@day</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var time in Enumerable.Range(9 * 2, 30).Select(i => TimeSpan.FromMinutes(i * 30)))
        {
            <tr>
                <th>@time.ToString(@"hh\:mm")</th>
                @foreach (var day in Enum.GetValues<DayOfWeek>())
                {
                    var cellItems = times
                    .Where(t => t.DayOfWeek == day && t.StartTime <= time && t.EndTime > time)
                    .ToList();

                    <td style="text-align: center; vertical-align: middle;">
                        @if (cellItems.Any())
                        {
                            @foreach (var t in cellItems)
                            {
                                <div style="margin-bottom: 5px;">
                                    <strong>@t.Description</strong><br />
                                    <span class="text-muted small">@t.Student.Name</span>
                                </div>
                            }
                        }
                        else
                        {
                            <em class="text-muted">-</em>
                        }
                    </td>
                }
            </tr>
        }
    </tbody>
</table>


@code {
    @code {
        private int GetRowSpan(StudentTime time)
        {
            return (int)(time.EndTime.TotalMinutes - time.StartTime.TotalMinutes) / 30; // 30분 단위
        }
    }

    List<StudentTime> times = new();
    List<StudentClass> classes = new();
    //public List<StudentTime> unableDateTime { get; set; } = new();
    //List<StudentClass> unableDateTime = new();
    protected override async Task OnInitializedAsync()
    {
        times = await studentService.GetAllTimesAsync();
        classes = await studentService.GetAllClassAsync();
    }


}