@page "/TimeTable/Time"

@inject StudentService studentService
@inject NavigationManager nav

<style>
    td {
        vertical-align: middle;
        text-align: center;
    }
</style>

@* <div class="form-check form-switch">
    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault">
    <label class="form-check-label" for="flexSwitchCheckDefault"></label>
</div> *@

@* 검색창 *@
<div style="display:flex;">
    <div class="input-group" style="max-width: fit-content;">

        <InputSelect TValue="string" @bind-Value=@searchTopic class="form-select">
            <option value="Name">Name</option>
            <option value="StudentClass">StudentClass</option>
        </InputSelect>
        @if (searchTopic is "StudentClass")
        {
            <InputSelect TValue="string" @bind-Value=@searchContent class="form-select">
                @foreach (var klass in classes)
                {
                    <option value=@klass.Id>@klass.Name</option>
                }
            </InputSelect>
        }
        else
        {
            <InputText @bind-Value="@searchContent" class="form-control" />
        }
        <button type="button" @onclick="StartSearch" class="btn btn-secondary">검색</button>
        <button @onclick="CancelSearch" class="btn btn-secondary border-start-1">취소</button>

    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    public string? searchTopic { get; set; }
    [SupplyParameterFromQuery]
    public string? searchContent { get; set; }

    private void StartSearch()
    {
        nav.NavigateTo($"/TimeTable/Time?searchTopic=\"{searchTopic}\"&searchContent={searchContent}");
    }

    private void CancelSearch()
    {
        nav.NavigateTo("/TimeTable/Time?");
    }
    protected override async Task OnParametersSetAsync()
    {
        if (String.IsNullOrWhiteSpace(searchTopic))
        {
            studenttimes = await studentService.GetOnlyTimesWithStudentAsync();
        }
        else if (searchTopic is "Name")
        {
            studenttimes = await studentService.GetTimesByStudentNameAsync(searchContent!);
        }
        else if (searchTopic is "StudentClass")
        {
            studenttimes = await studentService.GetTimesByStudentClassAsync(searchContent!);
        }

    }
}


<table class="table table-bordered align-content-center text-md-center">
    <thead>
        <tr>
            <th>시간＼요일</th>
            @foreach (var day in Enum.GetValues<DayOfWeek>())
            {
                <th style="@(day == DayOfWeek.Sunday ? "color:orangered" : null)">
                    @day
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var time in Enumerable.Range(9 * 2, 30).Select(i => TimeSpan.FromMinutes(i * 30)))
        {
            <tr>
                <th>@time.ToString(@"hh\:mm")</th>
                @foreach (var day in Enum.GetValues<DayOfWeek>())
                {
                    var cellItems = studenttimes
                    .Concat(classtimes)
                    .Where(t => t.DayOfWeek == day && t.StartTime <= time && t.EndTime > time)
                    .ToList();


                    @if (cellItems.Any())
                    {
                        <td style="text-align: center; vertical-align: middle; background-color:darkgrey">
                            @foreach (var t in cellItems)
                            {
                                <div style="margin-bottom: 5px;">
                                    <strong>@t.Description</strong><br />
                                    @if (t.Student is not null)
                                    {
                                        <span class="text-muted small">@t.Student.Name</span>
                                    }
                                    else if (t.StudentClass is not null)
                                    {
                                        <span class="text-muted small">@t.StudentClass.Name</span>
                                    }

                                </div>
                            }
                        </td>
                    }
                    else
                    {
                        <td style="text-align: center; vertical-align: middle;">
                            <em class="text-muted">-</em>
                        </td>
                    }

                }
            </tr>
        }
    </tbody>
</table>


@code {

    private int GetRowSpan(StudentTime time)
    {
        return (int)(time.EndTime.TotalMinutes - time.StartTime.TotalMinutes) / 30; // 30분 단위
    }

    List<StudentTime> studenttimes = new();
    List<StudentTime> classtimes = new();
    List<StudentClass> classes = new();
    // List<StudentTime> showtimes = new();
    //public List<StudentTime> unableDateTime { get; set; } = new();
    //List<StudentClass> unableDateTime = new();
    protected override async Task OnInitializedAsync()
    {
        studenttimes = await studentService.GetOnlyTimesWithStudentAsync();
        classtimes = await studentService.GetOnlyTimesWithClassAsync();
        // showtimes = studenttimes.Concat(classtimes).ToList();
        classes = await studentService.GetAllClassAsync();
    }


}